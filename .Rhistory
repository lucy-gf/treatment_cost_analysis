aes(x = hce_cap, y = cost_usd_main_yr),
shape = 4, size = 3) +
labs(x = "Healthcare expenditure per capita ($2023)",
y = "Treatment cost ($2023)",
col = '', fill = '') +
# scale_color_gradientn(colors = colorscale, values = scales::rescale(breaks)) +
scale_x_log10(breaks = c(100,300,1000,3000,10000,30000), limits = c(80,30000)) +
# scale_y_log10() +
scale_colour_manual(values = effect_colors, labels = effect_labels,  aesthetics = c("colour", "fill")) +
theme_bw() + theme(text = element_text(size = 12)) +
facet_grid(outcome ~ study_pop, scales = 'free',
labeller = labeller(outcome = outcome_labels,
study_pop = pop_labels))
ggplot() +
geom_line(data = pred_obs %>% filter(effects == 'no_fixed_eff'),
aes(x = hce_cap, y = Estimate, col = effects, group = effects),
lty = 2, lwd = 0.8) +
geom_ribbon(data = pred_obs %>% filter(effects == 'no_fixed_eff'),
aes(x = hce_cap, fill = effects,
ymin = get(paste0('Q', 100*interval_probs[1])),
ymax = get(paste0('Q', 100*interval_probs[2]))),
alpha = 0.3) +
geom_point(data = pred_obs %>% filter(effects == 'fixed_eff'),
aes(x = hce_cap, y = Estimate, col = effects),
shape = 1, size = 3) +
geom_errorbar(data = pred_obs %>% filter(effects == 'fixed_eff'),
aes(x = hce_cap, col = effects,
ymin = get(paste0('Q', 100*interval_probs[1])),
ymax = get(paste0('Q', 100*interval_probs[2]))),
lwd = 0.8) +
geom_point(data = pred_obs %>% filter(effects == 'fixed_eff'),
aes(x = hce_cap, y = cost_usd_main_yr),
shape = 4, size = 3) +
labs(x = "Healthcare expenditure per capita ($2023)",
y = "Treatment cost ($2023)",
col = '', fill = '') +
# scale_color_gradientn(colors = colorscale, values = scales::rescale(breaks)) +
scale_x_log10(breaks = c(100,300,1000,3000,10000,30000), limits = c(80,30000)) +
scale_y_log10() +
scale_colour_manual(values = effect_colors, labels = effect_labels,  aesthetics = c("colour", "fill")) +
theme_bw() + theme(text = element_text(size = 12)) +
facet_grid(outcome ~ study_pop, scales = 'free',
labeller = labeller(outcome = outcome_labels,
study_pop = pop_labels))
ggsave(here::here('plots','observed_vs_predicted.png'),
width = 14, height = 8)
mcmc_trace(pref_model)
pref_model
pref_model$save_pars
plot(pref_model)
summary(pref_model)
mcmc_plot(pref_model, type = "areas", pars = "^b_")
mcmc_plot(pref_model, type = "areas", vairable = "^b_")
mcmc_plot(pref_model, type = "areas", variable = "^b_")
mcmc_plot(pref_model, type = "areas", pars = "^b_")
pp_check(pref_model)
pp_check(pref_model, type = "stat", stat = "mean")
plot(conditional_effects(pref_model))
mcmc_plot(pref_model, variable = "^r_")
mcmc_plot(pref_model, variable = "^r_")
fitted_vals <- fitted(pref_model)[, "Estimate"]
residuals <- residuals(pref_model)[, "Estimate"]
plot(fitted_vals, residuals, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, col = "red")
fitted_vals <- fitted(pref_model)[, "Estimate"]
residuals <- residuals(pref_model)[, "Estimate"]
#### PRODUCING AND SAVING PLOTS AND TABLES ####
# residuals vs fitted values
fitted_vals <- fitted(pref_model)[, "Estimate"]
residuals <- residuals(pref_model)[, "Estimate"]
ggplot(aes(fitted_vals, residuals)) +
labels xlab = "Fitted", ylab = "Residuals")
fitted_vals
r_v_f <- data.frame(fitted_vals = fitted_vals, residuals = residuals)
r_v_f %>%
ggplot(aes(fitted_vals, residuals)) +
labs(x = "Fitted", y = "Residuals") +
geom_hline(xintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot(aes(fitted_vals, residuals)) +
labs(x = "Fitted", y = "Residuals") +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot(aes(fitted_vals, residuals)) +
geom_point() +
labs(x = "Fitted", y = "Residuals") +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot(aes(fitted_vals, residuals)) +
geom_point() +
labs(x = "Fitted", y = "Residuals") +
theme_bw() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, residuals)) +
geom_point(aes(fitted_vals, fitted_vals + residuals)) +
labs(x = "Fitted", y = "Residuals") +
theme_bw() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, residuals)) +
labs(x = "Fitted", y = "Residuals") +
theme_bw() +
geom_hline(yintercept = 0, col = "black", lty = 2)
fitted(pref_model)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, residuals)) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
log(10)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, residuals), size = 2) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, residuals), size = 2, shape = 4) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, residuals), size = 2) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
residuals(pref_model)
ggsave(here::here('plots','fitted_vs_residuals.png'),
width = 8, height = 6)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals)), size = 2) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
fitted(pref_model)
fitted_vals <- unique(fitted(pref_model))[, "Estimate"]
residuals <- residuals(pref_model)[, "Estimate"]
r_v_f <- data.frame(fitted_vals = fitted_vals, residuals = residuals)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals)), size = 2) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
fitted_vals <- fitted(pref_model)[, "Estimate"]
residuals <- residuals(pref_model)[, "Estimate"]
r_v_f <- data.frame(fitted_vals = fitted_vals, residuals = residuals)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals)), size = 2) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
pref_model
pref_model$data
r_v_f <- data.frame(fitted_vals = fitted_vals, residuals = residuals,
study_pop = pref_model$data$study_pop,
treatment_type = pref_model$data$treatment_type)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop),
size = 2) +
labs(x = "Fitted values", y = "Residuals") +
theme_bw() +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop),
size = 2) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group') +
theme_bw() +
scale_color_manual(study_pop = age_colors, labels = age_labels) +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop),
size = 2) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group') +
theme_bw() +
scale_color_manual(study_pop = age_colors, labels = pop_labels) +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
age_colors
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop),
size = 2) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_x_log10() +
scale_y_log10() +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 16)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(1,4), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,4), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,2), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 12)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
ggsave(here::here('plots','fitted_vs_residuals.png'),
width = 8, height = 6)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Residuals", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 10)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
ggsave(here::here('plots','fitted_vs_residuals.png'),
width = 8, height = 6)
pref_model_name
source("~/Desktop/LSHTM/Research_Assistant_2325/Hospitalisation Costs/treatment_cost_analysis/scripts/model_run.R")
source("~/Desktop/LSHTM/Research_Assistant_2325/Hospitalisation Costs/treatment_cost_analysis/scripts/model_run.R")
warnings()
loos_scores <- loo_compare(loos_)
# print scores
cat('------------------\nLOO compare:\n');loos_scores
loos_scores %>% as_tibble()
loos_scores
rownames(loos_scores)
write_csv(data.frame(model = rownames(loos_scores), elpd_diff = round(loos_scores$elpd_diff),2),
here::here('output','LOO_compare.csv'))
loos_scores
loos_scores[1,]
loos_scores[,1]
write_csv(data.frame(model = rownames(loos_scores), elpd_diff = round(loos_scores[,1]),2),
here::here('output','LOO_compare.csv'))
write_csv(data.frame(model = rownames(loos_scores), elpd_diff = round(loos_scores[,1],2)),
here::here('output','LOO_compare.csv'))
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Absolute residual values", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 10)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
ggsave(here::here('plots','fitted_vs_residuals.png'),
width = 8, height = 6)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals)/fitted_vals, col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Absolute residual values", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 10)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals)/fitted_vals, col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Absolute residual values", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
#scale_y_log10() +
theme(text = element_text(size = 10)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Absolute residual values", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 10))
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals)/fitted_vals, col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Absolute residual values", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
#scale_y_log10() +
theme(text = element_text(size = 10)) +
geom_hline(yintercept = 0, col = "black", lty = 2)
r_v_f %>%
ggplot() +
geom_point(aes(fitted_vals, abs(residuals), col = study_pop, shape = treatment_type),
size = 3) +
labs(x = "Fitted values", y = "Absolute residual values", col = 'Age group', shape = 'Treatment type') +
theme_bw() +
scale_color_manual(values = age_colors, labels = pop_labels) +
scale_shape_manual(values = c(16,1), labels = outcome_labels) +
scale_x_log10() +
scale_y_log10() +
theme(text = element_text(size = 10))
# plot predictions against observed data
pred_obs <- fitted(pref_model, newdata = costs_gdp %>% drop_na(), probs = interval_probs) %>%
as_tibble() %>%
bind_cols(costs_gdp %>% drop_na()) %>%
mutate(effects = 'rand_eff') %>%
rbind(fitted(pref_model, newdata = costs_gdp %>% drop_na(), re_formula = NA, probs = interval_probs) %>%
as_tibble() %>% mutate(effects = 'no_rand_eff') %>% bind_cols(costs_gdp %>% drop_na())) %>%
drop_na()
effect_colors <- c('rand_eff' = '#f768a1', 'no_rand_eff' = '#41b6c4')
effect_labels <- c('Random effects', 'No random effects')
names(effect_labels) <- c('rand_eff','no_rand_eff')
ggplot() +
geom_line(data = pred_obs %>% filter(effects == 'no_rand_eff'),
aes(x = hce_cap, y = Estimate, col = effects, group = effects),
lty = 2, lwd = 0.8) +
geom_ribbon(data = pred_obs %>% filter(effects == 'no_rand_eff'),
aes(x = hce_cap, fill = effects,
ymin = get(paste0('Q', 100*interval_probs[1])),
ymax = get(paste0('Q', 100*interval_probs[2]))),
alpha = 0.3) +
geom_point(data = pred_obs %>% filter(effects == 'rand_eff'),
aes(x = hce_cap, y = Estimate, col = effects),
shape = 1, size = 3) +
geom_errorbar(data = pred_obs %>% filter(effects == 'rand_eff'),
aes(x = hce_cap, col = effects,
ymin = get(paste0('Q', 100*interval_probs[1])),
ymax = get(paste0('Q', 100*interval_probs[2]))),
lwd = 0.8) +
geom_point(data = pred_obs %>% filter(effects == 'rand_eff'),
aes(x = hce_cap, y = cost_usd_main_yr),
shape = 4, size = 3) +
labs(x = "Healthcare expenditure per capita ($2023)",
y = "Treatment cost ($2023)",
col = '', fill = '') +
# scale_color_gradientn(colors = colorscale, values = scales::rescale(breaks)) +
scale_x_log10(breaks = c(100,300,1000,3000,10000,30000), limits = c(80,30000)) +
scale_y_log10() +
scale_colour_manual(values = effect_colors, labels = effect_labels,  aesthetics = c("colour", "fill")) +
theme_bw() + theme(text = element_text(size = 12)) +
facet_grid(outcome ~ study_pop, scales = 'free',
labeller = labeller(outcome = outcome_labels,
study_pop = pop_labels))
ggsave(here::here('plots','observed_vs_predicted.png'),
width = 14, height = 8)
gdp_isos
hce_isos
isos <- hce_isos #intersect(gdp_isos, hce_isos)
colnames(data_wdi) <- c('iso3c','country','hce_cap')
source("~/Desktop/LSHTM/Research_Assistant_2325/Hospitalisation Costs/treatment_cost_analysis/scripts/make_outputs.R")
## add WDI data back in
data_wdi <- data.frame(iso3c = isos) %>%
# left_join(gdp_data %>% select(country,iso3c,NY.GDP.PCAP.CD), by = 'iso3c') %>%
left_join(hce_data %>% select(country, iso3c,SH.XPD.CHEX.PC.CD), by = 'iso3c') %>%
mutate(SH.XPD.CHEX.PC.CD = inflate_USD_22_to_23*SH.XPD.CHEX.PC.CD) # inflate to 2023 HCEpc
source("~/Desktop/LSHTM/Research_Assistant_2325/Hospitalisation Costs/treatment_cost_analysis/scripts/make_outputs.R")
source("~/Desktop/LSHTM/Research_Assistant_2325/Hospitalisation Costs/treatment_cost_analysis/scripts/make_outputs.R")
source("~/Desktop/LSHTM/Research_Assistant_2325/Hospitalisation Costs/treatment_cost_analysis/scripts/make_outputs.R")
out_table_w
?predict
ggplot(pred_hce, aes(x = hce_cap, y = Estimate, color = study_pop, fill = study_pop)) +
geom_line(lwd = 1) +
geom_ribbon(aes(ymin = get(paste0('Q', 100*interval_probs[1])), ymax = get(paste0('Q', 100*interval_probs[2]))), alpha = 0.2, color = NA) +
labs(
x = "Healthcare expenditure per capita ($2023)",
y = "Predicted cost ($2023)",
fill = 'Age group',
color = 'Age group'
) +
scale_x_log10() +
# scale_y_log10() +
theme_bw() + facet_grid(treatment_type ~ study_pop, scales = 'free',
labeller = labeller(treatment_type = outcome_labels)) +
theme(text = element_text(size = 12)) +
scale_fill_manual(values = age_colors, labels = pop_labels) +
scale_color_manual(values = age_colors, labels = pop_labels)
